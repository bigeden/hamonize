<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
 
<mapper namespace="com.mapper.IPolicyUpdtMapper">

<select id="updtList" resultType="com.model.PolicyUpdtVo">
		SELECT 
			pu_seq, 
			pu_name, 
			pu_status,
			pu_dc,
			deb_new_version,
			deb_now_version
		FROM tbl_policy_package_list
		WHERE
			1=1 
			-- and status = 'N' 
			-- and base_deb_yn = 'N'
		ORDER  BY pu_seq desc 
	</select>
	
	<select id="updtComapreList" resultType="java.util.HashMap">
		SELECT 
			deb_new_version,
			pu_name
		FROM tbl_policy_package_list
		--WHERE base_deb_yn = 'N'
	</select>
	
	<insert id="updtCompareSave" parameterType="java.util.HashMap">	
			INSERT INTO tbl_policy_package_list 
				( PU_NAME									   
				, PU_STATUS
				, STATUS
				, DEB_APPLY_NAME
				, DEB_NEW_VERSION
				, BASE_DEB_YN) VALUES
				<foreach collection="data" item="item" separator=",">
					(#{item.package},'I','N',#{item.package},#{item.version}, 'Y')
				</foreach>	
	</insert>
	
	<update id="updtCompareUpdate" parameterType="java.util.HashMap">
		UPDATE tbl_policy_package_list 
			SET 
		DEB_NOW_VERSION = (SELECT DEB_NEW_VERSION FROM tbl_policy_package_list WHERE PU_NAME = #{package})
		,DEB_NEW_VERSION = #{version}
		,PU_STATUS = 'U'
		WHERE PU_NAME = #{package}
	</update>

	
	
	<delete id="updtPolicyProgrmDelete" parameterType="java.util.HashMap">
		DELETE FROM tbl_progrm_applc
		WHERE 
			 domain = #{domain}
			 <if test="org_seq != 1 ">
				and	org_seq in (
					with recursive search_org(seq,p_seq,org_nm,org_ordr,level,path,cycle) as (
			    select a.seq,a.p_seq,a.org_nm,a.org_ordr,0,array[a.seq],false
			    from tbl_org a
			    where a.seq = #{org_seq}::int and a.domain = #{domain}
			    union all
			    select a.seq,a.p_seq,a.org_nm,a.org_ordr,level+1,path || a.seq,a.seq=any(path)
			    from tbl_org a, search_org so 
			    where a.p_seq = so.seq and not cycle)
			    select seq
			    from search_org
				)
			</if>
	</delete>
	
	<update id="updatePolicyProgrm" parameterType="java.util.HashMap">
		<foreach collection="data" item="item" separator=";">
			update 
			tbl_progrm_applc 
			set ppm_seq = (select string_agg(A.ppm_seq,',')::text from 
				(
				select unnest(string_to_array(ppm_seq,',')) as ppm_seq from tbl_progrm_applc where org_seq=#{item.org_seq} and domain = #{domain}
				intersect
				select unnest(string_to_array(ppm_seq,',')) as ppm_seq from tbl_updt_applc where org_seq=#{item.org_seq} and domain = #{domain}
				) A) where org_seq = #{item.org_seq} and domain = #{domain}
		</foreach>
	</update>
	
	<insert id="updtSave" parameterType="java.util.HashMap">
		WITH rows AS (
			INSERT INTO TBL_UPDT_APPLC 
				(ORG_SEQ,									   
				PPM_SEQ,
				PPM_NAME,
				DOMAIN,
				JOB_ID) VALUES
				<if test="ppm_seq != null">
					<foreach collection="data" item="item" separator=",">
						(#{item.org_seq},#{ppm_seq},#{ppm_name},#{domain},#{job_id})
					</foreach>
        </if>
        RETURNING seq, org_seq, ppm_seq, ppm_name, domain, job_id
		)   
		INSERT INTO tbl_updt_applc_history (updt_seq, org_seq, ppm_seq, ppm_name, domain, job_id, RGSTR_DATE  ) SELECT seq, org_seq, ppm_seq, ppm_name, domain, job_id, now() FROM rows 			
	</insert>

	<select id="updtResult" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	INSERT INTO TBL_ACT_UPDT_LOG 
				( DEB_NAME,									   
				  KIND,
					ORG_SEQ,
					PC_HOSTNAME,
					PC_UUID,
					RGSTR_DATE,
					STATUS) 
					VALUES
				<if test="ppm_seq != null">
					<foreach collection="data" item="item" separator=",">
						(#{item.org_seq},#{ppm_seq},#{domain})
					</foreach>
        </if>
	SELECT pc_hostname,pc_uuid FROM TBL_PC_MANGR
	WHERE ORG_SEQ IN (
	<foreach collection="data" item="item" separator=",">
						#{item.org_seq}
					</foreach>
					)
					AND DOMAIN = #{domain}
					</select>
	
	<delete id="updtDelete" parameterType="java.util.HashMap">
		DELETE FROM TBL_UPDT_APPLC WHERE ORG_SEQ IN (
			<foreach collection="data" item="item" separator=",">
							#{item.org_seq}
				</foreach>
		) AND domain = #{domain}
	</delete>
	
	<select id="updtApplcView" resultType="com.model.PolicyUpdtVo" parameterType="com.model.PolicyUpdtVo" >
		SELECT array_to_string(array_agg(tua.ppm_seq),',')as ppm_seq FROM
			(SELECT distinct unnest(string_to_array(ppm_seq, ',')) ppm_seq
			FROM 
			TBL_UPDT_APPLC 
			WHERE ORG_SEQ in (with recursive search_org(domain,seq,p_seq,org_nm,org_ordr,section,level,path,cycle) as (
			select a.domain,a.seq,a.p_seq,a.org_nm,a.org_ordr,a.section,0,array[a.seq],false
			from tbl_org a 
			where a.seq = #{org_seq}
			and a.domain = #{domain}
			union all
			select b.domain,b.seq,b.p_seq,b.org_nm,b.org_ordr,b.section,level+1,path || b.seq,b.seq=any(path)
			from tbl_org b, search_org so 
		where b.p_seq = so.seq and b.domain = so.domain and not cycle)
		select seq
		from search_org 
		where 1=1
		order by level,org_ordr) and domain = #{domain} )tua
	</select>
	
	<!-- <update id="programSave" parameterType="HashMap">
		WITH upsert AS (UPDATE TBL_PROGRM_APPLC SET
				ORG_SEQ			= #{org_seq}				 
				, PPM_SEQ		= #{ppm_seq}		
				
				RETURNING *)
				INSERT INTO TBL_PROGRM_APPLC (	
				SEQ							
				, ORG_SEQ									   
				, PPM_SEQ						
				)
				SELECT (SELECT COALESCE(max(seq),0)+1 AS seq FROM TBL_PROGRM_APPLC)
				,#{org_seq},#{ppm_seq} WHERE NOT EXISTS (SELECT * FROM upsert)
	</update> -->
<select id="getUpdtHistoryLastJob" parameterType="com.model.PolicyUpdtVo" resultType="int">
		SELECT COALESCE(max(JOB_ID),0) as job_id FROM tbl_updt_applc_history WHERE DOMAIN = #{domain} and ORG_SEQ = #{org_seq}
		LIMIT 1
	</select>

</mapper>
