<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mapper.IOrgMapper">
	
	
	<select id="getOrgName" resultType="com.model.OrgVo">
		SELECT *
		FROM tbl_org
		WHERE seq = (select org_seq from public.tbl_pc_mangr where pc_uuid = #{pc_uuid} )
		and DOMAIN = #{domain}
	</select>
	
	
	<select id="selectGroupInfo" resultType="com.model.OrgVo"  parameterType="com.model.OrgVo">
		SELECT 
			*
		FROM tbl_org
		<where>
				trim(org_nm) = #{org_nm}
				and trim(domain) = #{domain}
		</where>
	</select>
	
	<select id="groupUpperCode" resultType="com.model.OrgVo" parameterType="com.model.OrgVo">
		select  
		STRING_AGG( 'OU=' || TA.org_nm, ',' ORDER BY TA.seq DESC)   AS org_nm 
		from (
		WITH RECURSIVE T AS
		(
		    SELECT A.*
		    FROM tbl_org A
		    where A.seq = #{seq}
				and A.DOMAIN = #{domain}
		    UNION ALL
		    
		   SELECT A.*
		    FROM tbl_org A,  T
		    
		    WHERE A.seq = T.p_seq
				and A.DOMAIN = T.domain
		)
		SELECT domain,seq,p_seq,replace(replace(replace(replace(replace(replace(coalesce(org_nm,p_org_nm),'/',''),'_',''),'(',''),')',''),'+',''),' ','')as org_nm FROM T 
		order by T.seq asc
		
		) TA
	
	</select>
	
	<select id="groupNewUpperCode" resultType="com.model.OrgVo" parameterType="com.model.OrgVo">
		select  
		STRING_AGG( 'OU=' || TA.org_nm, ',' ORDER BY TA.seq DESC)   AS org_nm 
		from (
		WITH RECURSIVE T AS
		(
		    SELECT A.*
		    FROM tbl_org A
		    where A.seq = #{p_seq}
				and A.DOMAIN = #{domain}
		    UNION ALL
		    
		   SELECT A.*
		    FROM tbl_org A,  T
		    
		    WHERE A.seq = T.p_seq
				and A.DOMAIN = T.domain
		)
		SELECT domain,seq,p_seq,replace(replace(replace(replace(replace(replace(coalesce(org_nm,p_org_nm),'/',''),'_',''),'(',''),')',''),'+',''),' ','')as org_nm FROM T 
		order by T.seq asc
		
		) TA
	
	</select>
	
	<select id="orgOldNm" resultType="com.model.OrgVo" parameterType="com.model.OrgVo">
		SELECT ORG_NM FROM TBL_ORG WHERE SEQ = #{seq} and DOMAIN = #{domain}
	
	</select>

	<!-- 조직목록 -->
	<select id="orgList" resultType="com.model.OrgVo" parameterType="java.lang.String">
		<![CDATA[ 
			with recursive search_org(
					"domain",
					seq,
					p_seq,
					org_nm,
					org_ordr,
					section,
					level,
					path,
					inventory_id,
					group_id,
					cycle) as (
					select
					a."domain" ,
						a.seq,
						a.p_seq,
						a.org_nm,
						a.org_ordr,
						a.section,
						0,
						array[a.seq],
						a.inventory_id,
						a.group_id,
						false
					from
						tbl_org a
					where
						a.p_seq = 0
						and a.domain = #{domain}
					union all
					select
						b."domain",
						b.seq,
						b.p_seq,
						b.org_nm,
						b.org_ordr,
						b.section,
						level + 1,
						path || b.seq,
						b.inventory_id,
						b.group_id,
						b.seq = any(path)
					from
						tbl_org b,
						search_org so
					where
						b.p_seq = so.seq
						and b."domain" = #{domain}
						and not cycle)
							select
						"domain",
						seq,
						p_seq,
						org_nm,
						org_ordr,
						section,
						level,
						path,
						inventory_id,
						group_id
					from
						search_org
					order by
						level,
						org_ordr
				]]>	
	</select>
	
	<select id="getTeamList" resultType="com.model.OrgVo">
		with recursive search_org(domain,seq,p_seq,org_nm,org_ordr,section,level,path,cycle) as (
			select a.domain,a.seq,a.p_seq,a.org_nm,a.org_ordr,a.section,0,array[a.seq],false
			from tbl_org a 
			where a.p_seq = 0
			and domain = #{domain}
			union all
			select b.domain,b.seq,b.p_seq,b.org_nm,b.org_ordr,b.section,level+1,path || b.seq,b.seq=any(path)
			from tbl_org b, search_org so 
		where b.p_seq = so.seq and b.domain = so.domain and not cycle)
		select domain,seq,p_seq,org_nm,org_ordr,section,level,path
		from search_org 
		where section = 'S'
		order by level,org_ordr
	</select>
	
	
	<select id="getOrgAuth" resultType="com.model.OrgVo">
		select * 
		from tbl_admin_user 
		<where>
			authkey = #{authkey}
		</where> 
	</select>	

	<select id="orgChoose" resultType="com.model.OrgVo">
	<![CDATA[ 
		select * from tbl_org whereorder by seq asc
    ]]>	
	</select>
	
	<select id="orgView" parameterType="com.model.OrgVo" resultType="com.model.OrgVo">
	<![CDATA[ 
	
		SELECT 
				A.DOMAIN
			,	A.SEQ
			, A.P_SEQ
			, A.ORG_ORDR
			, A.ORG_NM
			, A.ORG_ORDR
			, A.writer_id			
			, A.SECTION
			, A.P_ORG_NM
			, A.ALL_ORG_NM
			, A.SIDO
			, A.GUGUN
			, A.ORG_NUM
			, INVENTORY_ID
			, GROUP_ID
		FROM TBL_ORG A
		WHERE A.SEQ = #{seq}
		AND A.DOMAIN = #{domain}
	]]>	
	</select>

	<!-- 조직등록 -->
	<update id="orgSave" parameterType="com.model.OrgVo" useGeneratedKeys="true" keyProperty="seq" keyColumn="seq">
		WITH upsert AS (
			UPDATE TBL_ORG  SET
				P_SEQ			= #{p_seq}				 
				, ORG_ORDR		= #{org_ordr}		
				, ORG_NM		= #{org_nm}		
				, P_ORG_NM		= #{p_org_nm}
				, writer_id		= #{writer_id}
				, WRITER_IP		= #{writer_ip}		
				, UPDATE_WRITER_ID		= #{writer_id}		
				, UPDT_DATE		= now()	
				, UPDATE_WRITER_IP		= #{writer_ip} 
				, SIDO		= #{sido} 
				, GUGUN		= #{gugun} 
				, SECTION		= #{section} 
				, ALL_ORG_NM	= 
				<if test="p_seq == 0">
					#{org_nm}
				</if>
				<if test="p_seq != 0">
					( select  
					STRING_AGG(TA.org_nm, '|' ORDER BY TA.seq ASC) || '|' || #{org_nm}   AS all_org_nm 
					from (
					WITH RECURSIVE T AS
					(
					    SELECT A.*
					    FROM tbl_org A
					    where A.seq = #{p_seq}
							and A.DOMAIN = #{domain}
					    UNION ALL
					    
					   SELECT A.*
					    FROM tbl_org A,  T
					    
					    WHERE A.seq = T.p_seq
							and A.DOMAIN = T.domain
					)
					SELECT seq,domain,p_seq,replace(replace(replace(replace(replace(replace(coalesce(org_nm,p_org_nm),'/',''),'_',''),'(',''),')',''),'+',''),' ','')as org_nm FROM T 
					order by T.seq asc
					
					) TA )
					
				</if>
				WHERE SEQ = #{seq} and DOMAIN = #{domain}	 RETURNING *
		)
				
		INSERT INTO 
		TBL_ORG (	
			SEQ
			, DOMAIN				
			, P_SEQ										   
			, ORG_ORDR						 
			, ORG_NM						
			, P_ORG_NM						  
			, writer_id						
			, RGSTR_DATE						
			, WRITER_IP						
			, UPDATE_WRITER_ID				
			, UPDT_DATE						
			, UPDATE_WRITER_IP				
			, SECTION
			, ALL_ORG_NM
		)
		SELECT (SELECT COALESCE(max(seq),0)+1 AS seq FROM TBL_ORG where domain = #{domain})
		,#{domain},#{p_seq},#{org_ordr},#{org_nm},#{p_org_nm},#{writer_id},now()
		,#{writer_ip},#{writer_id},now(),#{writer_ip},#{section},
		<if test="p_seq == 0">
		  #{org_nm}
		</if>
		<if test="p_seq != 0">
		( 	select STRING_AGG(TA.org_nm, '|' ORDER BY TA.seq ASC) || '|' || #{org_nm} AS all_org_nm 
			from (
				WITH RECURSIVE T AS (
					SELECT A.*
					FROM tbl_org A
					where A.seq = #{p_seq}
					and A.DOMAIN = #{domain}
					UNION ALL
					
					SELECT A.*
					FROM tbl_org A,  T
					
					WHERE A.seq = T.p_seq
					and A.DOMAIN = T.domain
				)
				SELECT domain,seq,p_seq,replace(replace(replace(replace(replace(replace(coalesce(org_nm,p_org_nm),'/',''),'_',''),'(',''),')',''),'+',''),' ','')as org_nm FROM T 
				order by T.seq asc				
			) TA )
		</if>
		WHERE NOT EXISTS (SELECT * FROM upsert)
	</update>

	
	<!-- 하위 부서 찾기 -->
	<select id="searchChildDept" parameterType="com.model.OrgVo" resultType="com.model.OrgVo">
		WITH RECURSIVE T AS (
			SELECT A.*
			FROM tbl_org A
			where A.p_seq = #{seq}
			and A.DOMAIN = #{domain}
			UNION ALL
			
			SELECT A.*
			FROM tbl_org A, T	
			WHERE T.seq = A.p_seq
			and T.DOMAIN = a.domain
		)
		SELECT domain,seq,p_seq,org_nm,all_org_nm FROM T 
		order by T.seq asc 		
	</select>

	<!-- 하위 부서 경로 이름 가져오기 -->
	<select id="getAllOrgNm" parameterType="com.model.PcMangrVo" resultType="com.model.OrgVo">
		select all_org_nm
		from tbl_org
		where seq = #{org_seq}
		and DOMAIN = #{domain}
	</select>

	<!-- 하위 부서 경로 이름 업데이트 -->
	<update id="allOrgNmUpdate" parameterType="com.model.OrgVo">
		update tbl_org
		set all_org_nm = #{all_org_nm}
		where seq = #{seq}
		and DOMAIN = #{domain}
	</update>

	<!-- 조직삭제 -->
	<delete id="orgDelete" parameterType="com.model.OrgVo">
		DELETE FROM TBL_ORG
			WHERE DOMAIN = #{domain}
			AND SEQ IN
			(
				with recursive search_org(domain,seq,p_seq,org_nm,org_ordr,level,path,cycle) as (
				select a.domain,a.seq,a.p_seq,a.org_nm,a.org_ordr,0,array[a.seq],false
				from tbl_org a
				where a.seq = #{seq}
				and a.DOMAIN = #{domain}
				union all
				select a.domain,a.seq,a.p_seq,a.org_nm,a.org_ordr,level+1,path || a.seq,a.seq=any(path)
				from tbl_org a, search_org so 
				where a.p_seq = so.seq and a.DOMAIN = so.domain and not cycle)
				select seq
				from search_org
			)
	</delete>
	
	<select id="getOrgLastSeq" resultType="com.model.OrgVo" parameterType="com.model.OrgVo">
		SELECT COALESCE(max(seq),0) AS seq FROM TBL_ORG WHERE DOMAIN = #{domain}
	</select>
	
	<update id="addAwxId" parameterType="com.model.OrgVo"> 
		UPDATE TBL_ORG SET INVENTORY_ID = #{inventory_id}, GROUP_ID = #{group_id} WHERE domain = #{domain} and seq = #{seq}
	</update>

	<update id="addDownAwxId" parameterType="com.model.OrgVo"> 
		UPDATE TBL_ORG SET GROUP_ID = #{group_id} WHERE domain = #{domain} and seq = #{seq}
	</update>
</mapper>